<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Walking in Pixels</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-06T02:34:05.435Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Leptus He</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>球谐函数 - 01 函数拟合</title>
    <link href="http://example.com/2023/07/04/spherical-harmonics-01-function-fitting/"/>
    <id>http://example.com/2023/07/04/spherical-harmonics-01-function-fitting/</id>
    <published>2023-07-04T13:01:14.000Z</published>
    <updated>2023-07-06T02:34:05.435Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;计算机应用常常需要使用简单函数的线性组合来拟合某个复杂函数。例如，在游戏开发中，为了实现某些渲染效果，通常会在shader中使用到正弦函数。但是，由于GPU计算正弦函数的指令数较多，性能开销比较高，开发者通常会考虑使用多项式函数$x^{n}$的线性组合来拟合正弦函数，从而减</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Temporal Antialiasing - 02</title>
    <link href="http://example.com/2019/03/11/temporal-antialiasing-02/"/>
    <id>http://example.com/2019/03/11/temporal-antialiasing-02/</id>
    <published>2019-03-11T21:30:00.000Z</published>
    <updated>2023-07-06T02:34:05.435Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;History-Color失效的情况&quot;&gt;&lt;a href=&quot;#History-Color失效的情况&quot; class=&quot;headerlink&quot; title=&quot;History Color失效的情况&quot;&gt;&lt;/a&gt;History</summary>
        
      
    
    
    
    <category term="Graphics" scheme="http://example.com/categories/Graphics/"/>
    
    
    <category term="Graphics" scheme="http://example.com/tags/Graphics/"/>
    
    <category term="Antialiasing" scheme="http://example.com/tags/Antialiasing/"/>
    
  </entry>
  
  <entry>
    <title>Temporal Antialiasing - 01</title>
    <link href="http://example.com/2019/03/09/temporal-antialiasing-01/"/>
    <id>http://example.com/2019/03/09/temporal-antialiasing-01/</id>
    <published>2019-03-09T19:30:00.000Z</published>
    <updated>2023-07-06T02:34:05.435Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;走样问题是渲染领域中经常遇到的一个问题。尤其是近几年，随着PBR(physically based</summary>
        
      
    
    
    
    <category term="Graphics" scheme="http://example.com/categories/Graphics/"/>
    
    
    <category term="Graphics" scheme="http://example.com/tags/Graphics/"/>
    
    <category term="Antialiasing" scheme="http://example.com/tags/Antialiasing/"/>
    
  </entry>
  
  <entry>
    <title>编写可测试的代码-依赖注入</title>
    <link href="http://example.com/2018/12/13/%E7%BC%96%E5%86%99%E5%8F%AF%E6%B5%8B%E8%AF%95%E7%9A%84%E4%BB%A3%E7%A0%81-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2018/12/13/%E7%BC%96%E5%86%99%E5%8F%AF%E6%B5%8B%E8%AF%95%E7%9A%84%E4%BB%A3%E7%A0%81-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</id>
    <published>2018-12-13T19:00:00.000Z</published>
    <updated>2023-07-06T02:34:05.435Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在代码中，类与类、类与方法或者其他软件实体之间总是存在着某些依赖关系。例如，假设某个类$A$的对象$a$需要完成某个功能，然而，它需要通过与类$B$的对象$b$的协作才能够完成该功能。在这个过程中，类$B$则成为类$A$的一个依赖。类$B$的对象$b$则成为了一个servi</summary>
        
      
    
    
    
    <category term="Unit Test" scheme="http://example.com/categories/Unit-Test/"/>
    
    
    <category term="Unit Test" scheme="http://example.com/tags/Unit-Test/"/>
    
  </entry>
  
</feed>
